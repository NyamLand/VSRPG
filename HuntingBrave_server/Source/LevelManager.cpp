
#include	"iextreme.h"
#include	"GameParam.h"
#include	"LevelManager.h"

//***************************************************************
//
//	LevelManagerクラス
//
//***************************************************************

//----------------------------------------------------------------------------------------------
//	グローバル
//----------------------------------------------------------------------------------------------

//	実体
LevelManager*	levelManager = nullptr;

//----------------------------------------------------------------------------------------------
//	初期化・解放
//----------------------------------------------------------------------------------------------

	//	コンストラクタ
	LevelManager::LevelManager( void )
	{
		//	レベル情報初期化
		for ( int p = 0; p < PLAYER_MAX; p++ )
		{
			//	経験値初期化
			levelInfo[p].exp = 0;

			//	各レベル初期化
			for ( int i = 0; i < LEVEL_TYPE::TYPE_MAX; i++ )
			{
				levelInfo[p].level[i] = 0;
			}
		}

		expData[ENEMY_EXP::BIG_ENEMY] = 5000;
		expData[ENEMY_EXP::SMALL_ENEMY] = 1000;
	}

	//	デストラクタ
	LevelManager::~LevelManager( void )
	{

	}

//----------------------------------------------------------------------------------------------
//	動作関数
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//	情報設定
//----------------------------------------------------------------------------------------------

	//	レベル加算
	void	LevelManager::AddLevel( int id, char levelType )
	{
		levelInfo[id].level[levelType]++;

		SendLevel( id, levelType, levelInfo[id].level[levelType] );
	}

	//	経験値計算
	//void	LevelManager::CalcExp( int id, int exp )
	//{
	//	levelInfo[id].exp += exp;
	//	
	//	if ( levelInfo[id].exp <= 0 )
	//	{
	//		levelInfo[id].exp = 0;
	//	}
	//}

	//	経験値計算
	void	LevelManager::CalcExp( int id, char enemyType )
	{
		//	経験値加算
		levelInfo[id].exp += expData[enemyType];

		//	下限設定
		if ( levelInfo[id].exp <= 0 )	levelInfo[id].exp = 0;
	}

	//	レベル送信
	void	LevelManager::SendLevel( int id, char levelType, char level )
	{
		//	情報設定
		SendLevelData	sendLevelData( levelType, level );

		//	情報送信
		gameParam->send( id, ( LPSTR )&sendLevelData, sizeof( sendLevelData ) );
	}

	//	経験値送信
	void	LevelManager::SendExp( int id )
	{
		SendExpData	sendExpData( levelInfo[id].exp );
		gameParam->send( id, ( LPSTR )&sendExpData, sizeof( sendExpData ) );
	}

//----------------------------------------------------------------------------------------------
//	情報取得
//----------------------------------------------------------------------------------------------

	//	各プレイヤーレベル情報取得
	LevelInfo&	LevelManager::GetLevelInfo( int id )
	{
		return	levelInfo[id];
	}

	//	各レベル取得
	char	LevelManager::GetLevel( int id, char levelType )const
	{
		return	levelInfo[id].level[levelType];
	}

	//	経験値取得
	int	LevelManager::GetExp( int id )const
	{
		return	levelInfo[id].exp;
	}

//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------
//	受信処理
//----------------------------------------------------------------------------------------------







