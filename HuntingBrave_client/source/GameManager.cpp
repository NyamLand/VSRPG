
#include	"iextreme.h"
#include	<vector>
#include	<memory>
#include	"GlobalFunction.h"
#include	"system/Framework.h"
#include	"sceneMatching.h"
#include	"sceneMain.h"
#include	"sceneResult.h"
#include	"sceneTitle.h"
#include	"GameManager.h"

//***************************************************************
//
//	GameManagerクラス
//
//***************************************************************

//---------------------------------------------------------------------------------------
//	グローバル	
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
//	初期化・解放
//---------------------------------------------------------------------------------------

	//	コンストラクタ
	GameManager::GameManager( void ) : 
		timer( 0 ),
		isComplete( false ), changeSceneFrag( false ), gameState( false )
	{
		//	フォント追加
		AddFontResourceEx( "DATA/font001.TTF", FR_PRIVATE, NULL );

		scene = SCENE::MATCHING;

		//	CSV読み込み
		LoadData();
	}

	//	デストラクタ
	GameManager::~GameManager( void )
	{
		
	}

	//	初期化
	bool	GameManager::Initialize( void )
	{
		return	true;
	}

	//	解放
	void	GameManager::Release( void )
	{
		
	}

	//	クライアント初期化
	void	GameManager::InitializeClient( void )
	{
		////	WinSock初期化
		//WSADATA	wsaData;
		//WSAStartup( MAKEWORD( 1, 1 ), &wsaData );
	}

	//	CSV読み込み
	bool	GameManager::LoadData( void )
	{
		//	CSVファイル
		fstream playerStream( "DATA/player_data.csv" );

		//	CSVリーダー初期化
		std::unique_ptr<CSVReader>	reader = 
			std::make_unique<CSVReader>( playerStream );

		//	ファイルから読み込み、vector配列に保存する
		int index = 0;
		while (1)
		{
			playerData.resize( index + 1 );
			reader->Read( playerData[index] );
			if ( playerData[index].size() == 0 )	break;
			index++;
		}
		return	true;
	}

//---------------------------------------------------------------------------------------
//	更新・描画
//---------------------------------------------------------------------------------------

	//	更新
	void	GameManager::Update( void )
	{
		
	}

//---------------------------------------------------------------------------------------
//	動作関数
//---------------------------------------------------------------------------------------

	//	シーン切り替え
	void	GameManager::ChangeScene( char nextScene )
	{
		if ( !changeSceneFrag )	return;

		//	シーン切り替え
		switch ( nextScene )
		{
		case SCENE::TITLE:
			MainFrame->ChangeScene( new sceneTitle() );
			break;

		case SCENE::MATCHING:
			MainFrame->ChangeScene( new sceneMatching() );
			break;

		case SCENE::MAIN:
			MainFrame->ChangeScene( new sceneMain() );
			break;

		case SCENE::RESULT:
			MainFrame->ChangeScene( new sceneResult() );
			break;
		}

		changeSceneFrag = false;
	}

//---------------------------------------------------------------------------------------
//	情報設定
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
//	情報取得
//---------------------------------------------------------------------------------------

	//	アップグレードデータ取得
	int	GameManager::GetUpGrade( char type, char param, char level )
	{
		return	std::stoi( playerData[1 + ( type * 5 )+ level][param] );
	}

	//	フレーバーテキスト取得
	char*	GameManager::GetFlavorText( char type, char level )
	{
		//	一行目は説明なのでスキップ
		string str = playerData[1 + ( type * 6 ) + level][UPGRADE_DATA::TEXT];
		int length = str.length();
		char*	ret = new char[length + 1];
		memcpy( ret, str.c_str(), length + 1 );
		return	ret;
	}