
#include	"iextreme.h"
#include	"GlobalFunction.h"
#include	"UIManager.h"

//***************************************************************
//
//	UIManagerクラス
//
//***************************************************************

//---------------------------------------------------------------------------------------
//	グローバル	
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
//	初期化・解放
//---------------------------------------------------------------------------------------

//	コンストラクタ
UIManager::UIManager(void)
{

}

//	デストラクタ
UIManager::~UIManager(void)
{
	Release();
}

//	初期化
bool	UIManager::Initialize( void )
{
	//---------------------------------------
	//	HPバーのポジションをセット(左下）
	//---------------------------------------
	int width = (int)(HP_MAX::WIDTH / 2.5f);			//	スケール1/2.5
	int height = (int)(HP_MAX::HEIGHT / 2.5f);			//	スケール1/2.5
	int posx = width / 2;								//	中心から端までの距離
	int posy = iexSystem::ScreenHeight - height / 2;	//	画面端から画像の中心から端までの距離引く

	timerUI = new TimerUI();
	hpUI = new HpUI(posx, posy, width, height);
	expUI = new ExpUI(posx, posy, width, height);
	itemUI = new ItemUI(posx, posy, width, height);

	//---------------------------------------
	//	マップのポジションをセット(左下）
	//---------------------------------------
	width = (int)(MAP_MAX::WIDTH / 2.5f);			//	スケール1/2.5
	height = (int)(MAP_MAX::HEIGHT / 2.5f);			//	スケール1/2.5
	posx = iexSystem::ScreenWidth - (width / 2);	//	中心から端までの距離
	posy = height / 2;								//	画面端から画像の中心から端までの距離引く

	mapUI = new MapUI(posx, posy, width, height);

	return	true;
}

//	解放
void	UIManager::Release(void)
{
	SafeDelete( timerUI );
	SafeDelete( hpUI );
	SafeDelete( expUI );
	SafeDelete( itemUI );
	SafeDelete( mapUI );
}

//---------------------------------------------------------------------------------------
//	更新・描画
//---------------------------------------------------------------------------------------

//	更新
void	UIManager::Update(void)
{
	timerUI->Update();
	hpUI->Update();
	expUI->Update();
	itemUI->Update();
	mapUI->Update();
}

//	描画
void	UIManager::Render(void)
{
	timerUI->Render();
	hpUI->Render();
	expUI->Render();
	itemUI->Render();
	mapUI->Render();
}

//---------------------------------------------------------------------------------------
//	動作関数
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
//	情報設定
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
//	情報取得
//---------------------------------------------------------------------------------------

